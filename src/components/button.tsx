// Importing utility functions, components, and types
import { cn } from "@/lib/utils"; // Utility function to conditionally join class names
import { Slot } from "@radix-ui/react-slot"; // Radix UI Slot component to render a different element based on props
import { type VariantProps, cva } from "class-variance-authority"; // Importing types and helper from class-variance-authority (CVA)
import * as React from "react"; // Importing React to use hooks and components

/**
 * buttonVariants is a function created using class-variance-authority (CVA).
 * It generates conditional class names based on the variant and size props passed to the Button component.
 */
const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50", 
  {
    // Defining possible variants and their respective classes
    variants: {
      variant: {
        default: "bg-background text-primary-foreground", // Default button style
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90", // Style for a destructive button (e.g., delete actions)
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground", // Outline button with hover effect
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80", // Secondary button with hover effect
        ghost: "hover:bg-accent hover:text-accent-foreground", // Ghost button, no background but with hover effect
        link: "text-primary underline-offset-4 hover:underline", // Link-style button, underlined on hover
      },
      size: {
        default: "h-[52px] px-4 py-2", // Default button size (height and padding)
        sm: "h-9 rounded-md px-3", // Small button size
        lg: "h-11 rounded-md px-8", // Large button size
        icon: "h-10 w-10", // Icon button size (perfect for icons only)
      },
    },
    // Default values for variant and size if none are provided
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

// ButtonProps interface extends the standard button props and the variant props
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>, // Standard button HTML attributes (e.g., onClick, disabled)
    VariantProps<typeof buttonVariants> { // Variant props generated by CVA
  asChild?: boolean; // Option to render the button as a child of another component (using Radix UI's Slot)
}

/**
 * The Button component is a reusable button element that supports different styles (variants) and sizes.
 * It uses the class-variance-authority (CVA) utility to generate conditional class names based on props.
 * The component supports the option to render as a child component using the 'asChild' prop (via Radix Slot).
 */
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>( // Forwarding the ref to the actual button element
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"; // If 'asChild' is true, use Radix Slot; otherwise, use the standard 'button' element
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))} // Combine the variant, size, and any additional class names into a single string
        ref={ref} // Forward the ref to the actual button (or Slot) component
        {...props} // Spread the remaining props (like onClick, disabled) onto the button/slot component
      />
    );
  }
);

// Set the display name for the Button component for better debugging and developer experience in React DevTools
Button.displayName = "Button";

// Exporting the Button component and the buttonVariants function for use elsewhere in the app
export { Button, buttonVariants };
